type CanisterArgs = variant { Upgrade; Init : record { metadata : Metadata } };
type GetEscrowAccountRet = record {
  account_id : text;
};

type GetMetadataRet = record {
  weight : float64;
  drive_type : text;
  purchase_price : nat;
  token : principal;
  documents : vec record { text; text };
  supply_cap : nat;
  displays : text;
  seating : text;
  cargo : float64;
  logo : text;
  name : text;
  overall_height : float64;
  description : text;
  overall_width : float64;
  track_front : float64;
  collection_owner : principal;
  asset_canister : principal;
  ground_clearance : float64;
  key_features : vec text;
  range_per_charge : float64;
  track_rear : float64;
  acceleration : text;
  charging_speed : text;
  wheels : float64;
  brochure_url : text;
  index : principal;
  price : float64;
  battery : text;
  overall_length : float64;
  total_supply : nat;
  symbol : text;
  treasury : principal;
  images : vec text;
};
type Metadata = record {
  weight : float64;
  drive_type : text;
  purchase_price : nat;
  token : principal;
  documents : vec record { text; text };
  supply_cap : nat;
  displays : text;
  seating : text;
  cargo : float64;
  logo : text;
  name : text;
  overall_height : float64;
  description : text;
  overall_width : float64;
  track_front : float64;
  collection_owner : principal;
  asset_canister : principal;
  ground_clearance : float64;
  key_features : vec text;
  range_per_charge : float64;
  track_rear : float64;
  acceleration : text;
  charging_speed : text;
  wheels : float64;
  brochure_url : text;
  index : principal;
  price : float64;
  battery : text;
  overall_length : float64;
  symbol : text;
  treasury : principal;
  images : vec text;
};
type MetadataValue = variant { Nat : nat; Text : text };
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok : GetEscrowAccountRet; Err : text };
type Result_3 = variant { Ok : vec principal; Err : text };
type Result_4 = variant { Ok : GetMetadataRet; Err : text };
type Result_5 = variant { Ok; Err : text };
type SaleStatus = variant { Live; Rejected; Accepted };
type BookTokensArg = record { quantity : nat32 };
service : (CanisterArgs) -> {
  accept_sale : () -> (Result);
  update_annonymous_investor : (principal) -> (Result_5);
  reject_sale : () -> (Result);
  book_tokens : (BookTokensArg) -> (Result);
  get_booked_tokens : (opt principal) -> (nat) query;
  get_escrow_account : () -> (Result_2) query;
  get_metadata : () -> (Result_4) query;
  get_sale_status : () -> (SaleStatus) query;
  get_total_booked_tokens : () -> (nat) query;
}
